<?php

namespace App\Controller;


use App\Entity\Equipement;
use App\Entity\Fournisseur;
use App\Form\EquipementType;
use App\Form\FournisseurType;
use App\Form\SearchFournisseurType;
use App\Repository\FournisseurRepository;
use Knp\Component\Pager\PaginatorInterface;
use MercurySeries\FlashyBundle\FlashyNotifier;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
use function PHPUnit\Framework\returnArgument;

class FournisseurController extends AbstractController
{
    /**
     * @Route("/fournisseur", name="fournisseur")
     */
    public function index(): Response
    {
        return $this->render('front.html.twig', [
            'controller_name' => 'FournisseurController',
        ]);
    }

    /**
     * @Route("/afficheF", name="afficheF")
     */
    public function afficheF(PaginatorInterface $paginator,Request $request): Response
    {
        //rÃƒÂ©cupÃƒÂ©rer le repository pour utiliser la fonction findAll
        $r=$this->getDoctrine()->getRepository(Fournisseur::class);
        //faire appel Ãƒ  la fonction findAll()
        $données=$r->findAll();
        $fournisseurs=$paginator->paginate(
            $données,
            $request->query->getInt('page',1),
            2
        );

        //ou $r=$this->getDoctrine()->getRepository(Classroom::class)->findAll();
        return $this->render('fournisseur/afficheF.html.twig', [
            'f' => $fournisseurs,
        ]);
    }

    /**
     * @Route("/suppF/{id}", name="suppFF")
     */
    public function supp($id,FlashyNotifier $flashy): Response

    {
        //rÃ©cupÃ©rer le classroom Ã  supprimer
        $fournisseurs=$this->getDoctrine()->getRepository(Fournisseur::class)->find($id);
        //on passe Ã  la suppression
        $em=$this->getDoctrine()->getManager();
        $em->remove($fournisseurs);
        $em->flush();
        $flashy->warning('Fournisseur Supprimé!');

        return $this->redirectToRoute('afficheF');
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/ajoutF", name="ajoutF")
     */
    public function ajoutF(Request $request,FlashyNotifier $flashy): Response
    {
        //crÃƒÂ©ation du formulaire
        $fo = new Fournisseur();
        $form = $this->createForm(FournisseurType::class, $fo);
        //rÃƒÂ©cupÃƒÂ©rer les donnÃƒÂ©es saisies depuis la requete http
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $fo->setImage($fileName);
            $em = $this->getDoctrine()->getManager();
            $em->persist($fo);
            $em->flush();
            $flashy->success('Ajout succès!');
            return $this->redirectToRoute('afficheF');
        }

        return $this->render('fournisseur/ajoutF.html.twig', [
            'f' => $form->createView(),
        ]);

    }

    /**
     * @Route("/modifF/{id}", name="modifF")
     */
    public function modifF(Request $request,$id): Response
    {
        //rÃƒÂ©cupÃƒÂ©rer le classroom ÃƒÂ  modifier
        $fournisseur=$this->getDoctrine()->getRepository(Fournisseur::class)->find($id);
        //crÃƒÂ©ation du formulaire rempli
        $form=$this->createForm(FournisseurType::class,$fournisseur);
        //rÃƒÂ©cupÃƒÂ©rer les donnÃƒÂ©es saisies depuis la requete http
        $form->handleRequest($request);
        if($form->isSubmitted())
        {

            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $fournisseur->setImage($fileName);

            $em = $this->getDoctrine()->getManager();

            $em->flush();
            return $this->redirectToRoute('afficheF');
        }

        return $this->render('fournisseur/modifF.html.twig', [
            'f' => $form->createView(),
        ]);
    }
    /**
     * @Route("/affichefrontF", name="affichefrontF")
     */
    public function affichefrontF(): Response
    {
        //rÃƒÂ©cupÃƒÂ©rer le repository pour utiliser la fonction findAll
        $r=$this->getDoctrine()->getRepository(Fournisseur::class);
        //faire appel Ãƒ  la fonction findAll()
        $fournisseurs=$r->findAll();

        //ou $r=$this->getDoctrine()->getRepository(Classroom::class)->findAll();
        return $this->render('fournisseur/affichefrontF.html.twig', [
            'f' => $fournisseurs,
        ]);
    }



    /**
     * @Route("/searchFour", name="searchFour")
     */
    public function searchFour(Request $request,NormalizerInterface $Normalizer)
    {
     $repository=$this->getDoctrine()->getRepository(Fournisseur::class);
     $requestString=$request->get('searchValue');
     $fournisseurs=$repository->searchFournisseur($requestString);
     $jsonContent=$Normalizer->normalize($fournisseurs,'json',['groups'=>'fournisseurs']);
     $retour=json_encode($jsonContent);
     return new Response($retour);

    }
}


