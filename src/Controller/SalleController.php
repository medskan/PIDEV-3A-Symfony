<?php

namespace App\Controller;
use App\Entity\Personnel;
use App\Form\PersonnelType;
use App\Repository\SalleRepository;
use App\Entity\Salle;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;
use App\Form\SalleType;


class SalleController extends AbstractController
{
    /**
     * @Route("/salle", name="salle")
     */
    public function index(): Response
    {
        return $this->render('front.html.twig', [
            'controller_name' => 'SalleController',
        ]);
    }

    /**
     * @Route("/afficheS", name="afficheS")
     */
    public function afficheS(): Response
    {
        //rÃ©cupÃ©rer le repository pour utiliser la fonction findAll
        $r = $this->getDoctrine()->getRepository(Salle::class);
        //faire appel Ã  la fonction findAll()
        $salles = $r->findAll();

        //ou $r=$this->getDoctrine()->getRepository(Classroom::class)->findAll();
        return $this->render('salle/afficheSalle.html.twig', [
            's' => $salles,
        ]);
    }

    /**
     * @Route("/affichesalle", name="affichefsalle")
     */
    public function affichefsalle(): Response
    {
        //rÃ©cupÃ©rer le repository pour utiliser la fonction findAll
        $r = $this->getDoctrine()->getRepository(Salle::class);
        //faire appel Ã  la fonction findAll()
        $salles = $r->findAll();

        //ou $r=$this->getDoctrine()->getRepository(Classroom::class)->findAll();
        return $this->render('salle/affichefrontS.html.twig', [
            's' => $salles,
        ]);
    }

    /**
     * @Route("/suppS/{id}", name="suppSS")
     */
    public function supp($id): Response

    {
        //récupérer le classroom à supprimer
        $salles=$this->getDoctrine()->getRepository(Salle::class)->find($id);
        //on passe à la suppression
        $em=$this->getDoctrine()->getManager();
        $em->remove($salles);
        $em->flush();

        return $this->redirectToRoute('afficheS');
    }


    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    /**
     * @Route("/ajoutS", name="ajoutS")
     */
    public function ajoutS(Request $request): Response
    {
        //crÃ©ation du formulaire
        $s = new Salle();
        $form = $this->createForm(SalleType::class, $s);
        //rÃ©cupÃ©rer les donnÃ©es saisies depuis la requete http
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $s->setImage($fileName);
            $em = $this->getDoctrine()->getManager();
            $em->persist($s);
            $em->flush();
            return $this->redirectToRoute('afficheS');
        }

        return $this->render('salle/ajoutSalle.html.twig', [
            'f' => $form->createView(),
        ]);




    }


    /**
     * @Route("/modifS/{id}", name="modifS")
     */
    public function modifS(Request $request,$id): Response
    {
        //rÃ©cupÃ©rer le classroom Ã  modifier
        $salle=$this->getDoctrine()->getRepository(Salle::class)->find($id);
        //crÃ©ation du formulaire rempli
        $form=$this->createForm(SalleType::class,$salle);
        //rÃ©cupÃ©rer les donnÃ©es saisies depuis la requete http
        $form->handleRequest($request);
        if($form->isSubmitted() && $form->isValid())
        {

            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $salle->setImage($fileName);
            $em=$this->getDoctrine()->getManager();

            $em->flush();
            return $this->redirectToRoute('afficheS');
        }

        return $this->render('salle/ajoutSalle.html.twig', [
            'f' => $form->createView(),
        ]);
    }








}
