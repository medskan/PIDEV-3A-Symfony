<?php

namespace App\Controller;

use App\Entity\Personnel;
use App\Form\PersonnelType;
use App\Repository\PermissionRepository;
use App\Entity\Permission;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Illuminate\Foundation\Http\FormRequest;
use Symfony\Component\HttpFoundation\Request;
use App\Form\PermissionType;

class PermissionController extends AbstractController
{
    /**
     * @Route("/permission", name="permission")
     */
    public function index(): Response
    {
        return $this->render('permission/index.html.twig', [
            'controller_name' => 'PermissionController',
        ]);
    }


    /**
     * @Route("/affichePr", name="affichePr")
     */
    public function affichePr(): Response
    {
        //rÃ©cupÃ©rer le repository pour utiliser la fonction findAll
        $r=$this->getDoctrine()->getRepository(Permission::class);
        //faire appel Ã  la fonction findAll()
        $permissions=$r->findAll();

        //ou $r=$this->getDoctrine()->getRepository(Classroom::class)->findAll();
        return $this->render('permission/affichePermission.html.twig', [
            'pr' => $permissions,
        ]);
    }

    /**
     * @Route("/affichefrontPr", name="affichefrontPr")
     */
    public function affichefrontPr(): Response
    {
        //rÃ©cupÃ©rer le repository pour utiliser la fonction findAll
        $r=$this->getDoctrine()->getRepository(Permission::class);
        //faire appel Ã  la fonction findAll()
        $permissions=$r->findAll();

        //ou $r=$this->getDoctrine()->getRepository(Classroom::class)->findAll();
        return $this->render('permission/affichefrontPr.html.twig', [
            'pr' => $permissions,
        ]);
    }
    /**
     * @Route("/suppPr/{id}", name="suppPr")
     */
    public function supp($id): Response

    {
        //récupérer le classroom à supprimer
        $permissions=$this->getDoctrine()->getRepository(Permission::class)->find($id);
        //on passe à la suppression
        $em=$this->getDoctrine()->getManager();
        $em->remove($permissions);
        $em->flush();

        return $this->redirectToRoute('affichePr');
    }

    /**
     * @Route("/suppfrontPr/{id}", name="suppfrontPr")
     */
    public function suppfront($id): Response

    {
        //récupérer le classroom à supprimer
        $permissions=$this->getDoctrine()->getRepository(Permission::class)->find($id);
        //on passe à la suppression
        $em=$this->getDoctrine()->getManager();
        $em->remove($permissions);
        $em->flush();

        return $this->redirectToRoute('affichefrontPr');
    }

    /**
     * @Route("/ajoutPr", name="ajoutPr")
     */
    public function ajoutPr(Request $request): Response
    {
        //crÃ©ation du formulaire
        $pr = new Permission();
        $form = $this->createForm(PermissionType::class, $pr);
        //rÃ©cupÃ©rer les donnÃ©es saisies depuis la requete http
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist($pr);
            $em->flush();
            return $this->redirectToRoute('affichePr');
        }

        return $this->render('permission/ajoutPermission.html.twig', [
            'f' => $form->createView(),
        ]);

    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    /**
     * @Route("/ajoutfrontPr", name="ajoutfrontPr")
     */
    public function ajoutfrontPr(Request $request): Response
    {
        //crÃ©ation du formulaire
        $pr = new Permission();
        $form = $this->createForm(PermissionType::class, $pr);
        //rÃ©cupÃ©rer les donnÃ©es saisies depuis la requete http
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $pr->setImage($fileName);
            $em = $this->getDoctrine()->getManager();
            $em->persist($pr);
            $em->flush();
            return $this->redirectToRoute('affichefrontPr');
        }

        return $this->render('permission/ajoutfrontPr.html.twig', [
            'f' => $form->createView(),
        ]);

    }
    /**
     * @Route("/modifPr/{id}", name="modifPr")
     */
    public function modifPr(Request $request,$id): Response
    {
        //rÃ©cupÃ©rer le classroom Ã  modifier
        $permission=$this->getDoctrine()->getRepository(Permission::class)->find($id);
        //crÃ©ation du formulaire rempli
        $form=$this->createForm(PermissionType::class,$permission);
        //rÃ©cupÃ©rer les donnÃ©es saisies depuis la requete http
        $form->handleRequest($request);
        if($form->isSubmitted())
        {
            $em=$this->getDoctrine()->getManager();

            $em->flush();
            return $this->redirectToRoute('affichePr');
        }

        return $this->render('permission/ajoutPermission.html.twig', [
            'f' => $form->createView(),
        ]);
    }

    /**
     * @Route("/modiffrontPr/{id}", name="modiffrontPr")
     */
    public function modiffrontPr(Request $request,$id): Response
    {
        //rÃ©cupÃ©rer le classroom Ã  modifier
        $permission=$this->getDoctrine()->getRepository(Permission::class)->find($id);
        //crÃ©ation du formulaire rempli
        $form=$this->createForm(PermissionType::class,$permission);
        //rÃ©cupÃ©rer les donnÃ©es saisies depuis la requete http
        $form->handleRequest($request);
        if($form->isSubmitted())
        {
            $em=$this->getDoctrine()->getManager();

            $em->flush();
            return $this->redirectToRoute('affichefrontPr');
        }

        return $this->render('permission/ajoutfrontPr.html.twig', [
            'f' => $form->createView(),
        ]);
    }








}
