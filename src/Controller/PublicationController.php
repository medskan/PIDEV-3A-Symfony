<?php

namespace App\Controller;

use App\Entity\pubLike;
use App\Entity\Abonne;
use App\Repository\AbonneRepository;
use App\Entity\ProduitLike;
use App\Entity\Publication;
use App\Repository\PublicationRepository;
use App\Entity\User;
use App\Form\PublicationType;

use App\Repository\PubLikeRepository;
use App\Repository\ProduitLikeRepository;
use App\Repository\ProduitRepository;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Knp\Component\Pager\PaginatorInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use App\Form\CommentaireType;
use Doctrine\Persistence\ObjectManager;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Validator\Constraints\DateTime;

class PublicationController extends AbstractController
{
    /**
     * @Route("/publication", name="publication")
     */
    public function index(): Response
    {
        return $this->render('publication/affichefronP.html.twig', [
            'controller_name' => 'PublicationController',
        ]);
    }

    /**
     * @Route("/afficheP", name="afficheP")
     */
    public function afficheP(PaginatorInterface $paginator,Request $request): Response
    {
        //rÃƒÂ©cupÃƒÂ©rer le repository pour utiliser la fonction findAll
        $r=$this->getDoctrine()->getRepository(Publication::class);
        //faire appel Ãƒ  la fonction findAll()
        $données=$r->findAll();
        $publications=$paginator->paginate(
            $données,
            $request->query->getInt('page',1),
            2
        );

        //ou $r=$this->getDoctrine()->getRepository(Classroom::class)->findAll();
        return $this->render('publication/affichePub.html.twig', [
            'p' => $publications,
        ]);
    }

    /**
     * @Route("/affichefronP", name="affichefronP")
     */
    public function affichefronP(): Response
    {
        //rÃƒÂ©cupÃƒÂ©rer le repository pour utiliser la fonction findAll
        $r=$this->getDoctrine()->getRepository(Publication::class);
        //faire appel Ãƒ  la fonction findAll()
        $publications=$r->findAll();

        //ou $r=$this->getDoctrine()->getRepository(Classroom::class)->findAll();
        return $this->render('publication/affichefrontpub.html.twig', [
            'p' => $publications,
        ]);
    }



    /**
     * @Route("/suppP/{id}", name="suppPP")
     */
    public function supp($id): Response

    {
        //rÃ©cupÃ©rer le classroom Ã  supprimer
        $publications=$this->getDoctrine()->getRepository(Publication::class)->find($id);
        //on passe Ã  la suppression
        $em=$this->getDoctrine()->getManager();
        $em->remove($publications);
        $em->flush();

        return $this->redirectToRoute('afficheP');
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    /**
     * @Route("/ajoutP", name="ajoutP")
     */
    public function ajoutP(Request $request): Response
    {
        //crÃƒÂ©ation du formulaire
        $p = new Publication();
        $form = $this->createForm(PublicationType::class, $p);
        //rÃƒÂ©cupÃƒÂ©rer les donnÃƒÂ©es saisies depuis la requete http
        $form->handleRequest($request);
        if ($form->isSubmitted()&& $form->isValid()) {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $p->setImage($fileName);
            $em = $this->getDoctrine()->getManager();
            $em->persist($p);
            $em->flush();
            return $this->redirectToRoute('afficheP');
        }

        return $this->render('publication/ajoutPub.html.twig', [
            'f' => $form->createView(),

        ]);
    }

    /**
     * @Route("/ajoutfronP", name="ajoutfronP")
     */
    public function ajoutfronP(Request $request): Response
    {
        //crÃƒÂ©ation du formulaire
        $p = new Publication();
        $form = $this->createForm(PublicationType::class, $p);
        //rÃƒÂ©cupÃƒÂ©rer les donnÃƒÂ©es saisies depuis la requete http
        $form->handleRequest($request);
        if ($form->isSubmitted()&& $form->isValid()) {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $p->setImage($fileName);
            $em = $this->getDoctrine()->getManager();
            $em->persist($p);
            $em->flush();
            return $this->redirectToRoute('affichefronP');
        }

        return $this->render('publication/ajoutfronPub.html.twig', [
            'f' => $form->createView(),
        ]);

    }
    /**
     * @Route("/suppfronP/{id}", name="suppfronP")
     */
    public function suppfron($id): Response

    {
        //rÃ©cupÃ©rer le classroom Ã  supprimer
        $publications=$this->getDoctrine()->getRepository(Publication::class)->find($id);
        //on passe Ã  la suppression
        $em=$this->getDoctrine()->getManager();
        $em->remove($publications);
        $em->flush();

        return $this->redirectToRoute('affichefronpub');
    }

    /**
     * @Route("/modiffronP/{id}", name="modiffronP")
     */
    public function modifP(Request $request,$id): Response
    {
        //rÃƒÂ©cupÃƒÂ©rer le classroom ÃƒÂ  modifier
        $publications=$this->getDoctrine()->getRepository(Publication::class)->find($id);
        //crÃƒÂ©ation du formulaire rempli
        $form=$this->createForm(PublicationType::class,$publications);
        //rÃƒÂ©cupÃƒÂ©rer les donnÃƒÂ©es saisies depuis la requete http
        $form->handleRequest($request);
        if($form->isSubmitted())
        {
            $file = $form->get('image')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $publications->setImage($fileName);

            $em=$this->getDoctrine()->getManager();

            $em->flush();
            return $this->redirectToRoute('affichefrontpub');
        }

        return $this->render('publication/ajoutPub.html.twig', [
            'f' => $form->createView(),
        ]);
    }
    /**
     *
     * @Route("/publication/likee{id}", name="likee")
     * @param PublicationRepository $pubpository
     * @param $id
     * @param pubLikeRepository $likeRepoo
     * @param AbonneRepository $repository
     * @return Response
     */
    public function like(PublicationRepository $pubpository,$id,pubLikeRepository $likeRepoo,AbonneRepository $repository):Response{
        $publication=$pubpository->find($id);
        $abonne=$repository->find(2);
        $em=$this->getDoctrine()->getManager();
        if($publication->isliked2($abonne)){
            $like=$likeRepoo->findOneBy([
                    'publication'=>$publication,
                    'abonne'=>$abonne
                ]

            );
            $em->remove($like);
            $em->flush();
            return $this->json(['code'=>200,
                'message'=>'like bien supprimer',
                'likes'=>$likeRepoo->count(['publication'=>$publication])
            ],200);
        }

        $like =new pubLike();

        $like->setPublication($publication);

        $like->setAbonne($abonne);

        $em->persist($like);
        $em->flush();
        return $this->json(['code'=>200,
            'message'=>'like bien ajouté',
            'likes'=>$likeRepoo->count(['publication'=>$publication])
        ],200) ;
    }
}
